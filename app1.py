from flask import Flask, request, jsonify
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

app = Flask(__name__)

# Load and train the model once when the server starts
data = pd.read_csv(r"C:\Users\srush\OneDrive\Desktop\mini_project\smote.csv")
features = data.columns[:-1]  # All columns except the last one are features
target = "Heart_Disease_Status"

# Create lagged features for time series modeling
def create_lagged_features(data, lag=1):
    for i in range(1, lag + 1):
        data[f"lag_{i}"] = data[target].shift(i)  # Use target as dependent variable for lagging
    data.dropna(inplace=True)  # Drop rows with NaN values generated by shifting
    return data

# Apply lagged features (adjust lag if needed)
lag = 5
data = create_lagged_features(data, lag)
X = data[features.tolist() + [f"lag_{i}" for i in range(1, lag + 1)]]
y = data[target]

# Standardize the features (optional, can help linear regression)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get input data from the request
        data = request.json
        input_features = np.array([data['features']])

        # Standardize the input features (same scaling as the training data)
        input_scaled = scaler.transform(input_features)

        # Predict the result using the trained model
        prediction = model.predict(input_scaled)

        # If it's a binary classification problem, return a binary prediction
        if len(np.unique(y)) == 2:
            prediction = (prediction >= 0.5).astype(int)

        return jsonify({'prediction': int(prediction[0])})

    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True, port=8080)
